--- a/desktop_version/src/FileSystemUtils.cpp
+++ b/desktop_version/src/FileSystemUtils.cpp
@@ -101,10 +101,7 @@ int FILESYSTEM_init(char *argvZero, char* baseDir, char *assetsPath)
 	}
 	else
 	{
-		SDL_snprintf(output, sizeof(output), "%s%s",
-			PHYSFS_getBaseDir(),
-			"data.zip"
-		);
+		SDL_snprintf(output, sizeof(output), "/storage/roms/ports/VVVVVV/data.zip");
 	}
 	if (!PHYSFS_mount(output, NULL, 1))
 	{
@@ -124,7 +121,7 @@ int FILESYSTEM_init(char *argvZero, char* baseDir, char *assetsPath)
 		return 0;
 	}
 
-	SDL_snprintf(output, sizeof(output), "%s%s", PHYSFS_getBaseDir(), "gamecontrollerdb.txt");
+	SDL_snprintf(output, sizeof(output), "/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt");
 	if (SDL_GameControllerAddMappingsFromFile(output) < 0)
 	{
 		printf("gamecontrollerdb.txt not found!\n");
--- a/desktop_version/src/Game.cpp
+++ b/desktop_version/src/Game.cpp
@@ -175,9 +175,9 @@ void Game::init(void)
     slowdown = 30;
     gameframerate=34;
 
-    fullscreen = false;// true; //Assumed true at first unless overwritten at some point!
-    stretchMode = 0;
-    useLinearFilter = false;
+    fullscreen = true;
+    stretchMode = 1;
+    useLinearFilter = true;
     // 0..5
     controllerSensitivity = 2;
 
--- a/third_party/physfs/physfs_platform_unix.c
+++ b/third_party/physfs/physfs_platform_unix.c
@@ -341,23 +341,13 @@ char *__PHYSFS_platformCalcPrefDir(const char *org, const char *app)
      *
      * https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
      */
-    const char *envr = getenv("XDG_DATA_HOME");
-    const char *append = "/";
+    const char *envr = "/storage/roms/ports/";
     char *retval = NULL;
     size_t len = 0;
-
-    if (!envr)
-    {
-        /* You end up with "$HOME/.local/share/Game Name 2" */
-        envr = __PHYSFS_getUserDir();
-        BAIL_IF_ERRPASS(!envr, NULL);  /* oh well. */
-        append = ".local/share/";
-    } /* if */
-
-    len = strlen(envr) + strlen(append) + strlen(app) + 2;
+    len = strlen(envr) + strlen(app) + 2;
     retval = (char *) allocator.Malloc(len);
     BAIL_IF(!retval, PHYSFS_ERR_OUT_OF_MEMORY, NULL);
-    snprintf(retval, len, "%s%s%s/", envr, append, app);
+    snprintf(retval, len, "%s%s/", envr, app);
     return retval;
 } /* __PHYSFS_platformCalcPrefDir */
 

